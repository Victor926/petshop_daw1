-- Criação da tabela Usuario (tabela base para Cliente e Funcionario com estratégia JOINED)
CREATE TABLE usuario (
    cpf VARCHAR(255) PRIMARY KEY,
    nome VARCHAR(100) NOT NULL
);

-- Criação da tabela Cliente
CREATE TABLE cliente (
    cpf VARCHAR(255) PRIMARY KEY,
    -- Colunas adicionais específicas de Cliente, se houver.
    -- Aqui, a PK é também uma FK para a tabela usuario, conforme InheritanceType.JOINED
    FOREIGN KEY (cpf) REFERENCES usuario(cpf)
);

-- Criação da tabela Funcionario
CREATE TABLE funcionario (
    cpf VARCHAR(255) PRIMARY KEY,
    matricula VARCHAR(255) UNIQUE,
    -- Colunas adicionais específicas de Funcionario, se houver.
    -- Aqui, a PK é também uma FK para a tabela usuario, conforme InheritanceType.JOINED
    FOREIGN KEY (cpf) REFERENCES usuario(cpf)
);

-- Criação da tabela Pet
CREATE TABLE pet (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    especie VARCHAR(255),
    raca VARCHAR(255),
    porte VARCHAR(255),
    cliente_id VARCHAR(255) NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES cliente(cpf)
);

-- Criação da tabela Servico
CREATE TABLE servico (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo VARCHAR(255) NOT NULL,
    preco DECIMAL(10, 2) NOT NULL
);

-- Criação da tabela Atendimento
CREATE TABLE atendimento (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    data_hora TIMESTAMP NOT NULL,
    status VARCHAR(255) NOT NULL,
    confirmado BOOLEAN,
    cliente_id VARCHAR(255) NOT NULL,
    pet_id BIGINT NOT NULL,
    funcionario_id VARCHAR(255) NOT NULL,
    servico_id BIGINT NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES cliente(cpf),
    FOREIGN KEY (pet_id) REFERENCES pet(id),
    FOREIGN KEY (funcionario_id) REFERENCES funcionario(cpf),
    FOREIGN KEY (servico_id) REFERENCES servico(id)
);